/*
 * OpenAPI definition
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0-oas3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import com.google.gson.Gson;
import com.squareup.okhttp.mockwebserver.MockResponse;
import com.squareup.okhttp.mockwebserver.MockWebServer;
import com.squareup.okhttp.mockwebserver.RecordedRequest;
import io.swagger.client.ApiException;
import io.swagger.client.model.BalanceResponse;
import io.swagger.client.model.CardResponse;
import io.swagger.client.model.ReservationRequest;
import io.swagger.client.model.ReservationResponse;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import java.io.IOException;

import static org.junit.Assert.assertEquals;


/**
 * API tests for BankCoreApi
 */
public class BankCoreApiTest {

    private MockWebServer mockWebServer;

    private final BankCoreApi api = new BankCoreApi();

    @Before
    public void beforeEach() {
        mockWebServer = new MockWebServer();
        // That's how it works :/
        api.getApiClient().setBasePath(
                mockWebServer.url("").toString().replaceAll("/$", "")
        );
    }

    @After
    public void afterEach() throws IOException {
        mockWebServer.shutdown();
    }

    /**
     * Commit withdrawal
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void commitReservationOnAccountTest() throws Exception {
        String reservationId = "123456";

        mockWebServer.enqueue(new MockResponse().setBody("\"\""));

        String response = api.commitReservationOnAccount(reservationId);

        RecordedRequest request = mockWebServer.takeRequest();
        assertEquals(String.format("/v1/reservation/commit/%s", reservationId), request.getPath());
        assertEquals("POST", request.getMethod());
        assertEquals("", response);
    }
    /**
     * Commit withdrawal
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void commitNonExistingReservationOnAccountTest() throws Exception {
        String reservationId = "123456";

        mockWebServer.enqueue(new MockResponse().setBody("\"\"").setResponseCode(404));

        try {
            api.commitReservationOnAccount(reservationId);
        } catch (ApiException exception) {
            assertEquals(404, exception.getCode());
        }

        RecordedRequest request = mockWebServer.takeRequest();
        assertEquals(String.format("/v1/reservation/commit/%s", reservationId), request.getPath());
        assertEquals("POST", request.getMethod());
    }
    /**
     * Get Bank Account balance
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getAccountBalanceTest() throws Exception {

        String balance = "1000";
        mockWebServer.enqueue(new MockResponse().setBody(String.format("{\"balance\": %s}", balance)));

        String accountNumber = "LT355636149269234955";
        BalanceResponse response = api.getAccountBalance(accountNumber);

        RecordedRequest request = mockWebServer.takeRequest();
        assertEquals(String.format("/v1/account/balance/%s", accountNumber), request.getPath());
        assertEquals(1000, response.getBalance().intValue());
    }
    /**
     * 
     *
     * Get Bank Account number by Credit Card number
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getAccountNumberByCardTest() throws Exception {
        String accountNumber = "LT355636149269234955";
        mockWebServer.enqueue(new MockResponse().setBody(String.format("{\"accountNumber\": %s}", accountNumber)));

        String cardNumber = "4731055520998487";
        CardResponse response = api.getAccountNumberByCard(cardNumber);

        RecordedRequest request = mockWebServer.takeRequest();
        assertEquals(String.format("/v1/account/%s", cardNumber), request.getPath());
        assertEquals(accountNumber, response.getAccountNumber());
    }
    /**
     * 
     *
     * Reserve money on a Bank Account
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void reserveMoneyOnAccountTest() throws Exception {
        String accountNumber = "LT355636149269234955";
        String reservationId = "123456";
        Integer reservedAmount = 1000;
        ReservationRequest reservationRequest = new ReservationRequest(accountNumber, reservedAmount);

        mockWebServer.enqueue(new MockResponse().setBody(String.format("{\"reservationId\": %s}", reservationId)));

        ReservationResponse response = api.reserveMoneyOnAccount(reservationRequest);

        RecordedRequest request = mockWebServer.takeRequest();
        assertEquals("/v1/reservation", request.getPath());
        assertEquals("POST", request.getMethod());

        Gson gson = new Gson();

        assertEquals(gson.toJson(reservationRequest), request.getBody().readUtf8());
        assertEquals(reservationId, response.getReservationId());
    }
    /**
     * 
     *
     * Cancel reservation
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void cancelMoneyReservationOnAccountTest() throws Exception {

        String reservationId = "123456";

        mockWebServer.enqueue(new MockResponse().setBody("\"\""));

        String response = api.cancelMoneyReservationOnAccount(reservationId);

        RecordedRequest request = mockWebServer.takeRequest();
        assertEquals(String.format("/v1/reservation/%s", reservationId), request.getPath());
        assertEquals("DELETE", request.getMethod());
        assertEquals("", response);
    }
}
